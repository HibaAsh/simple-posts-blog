<template>
  <div class="home">
    <h1>Home</h1>
    <p ref="p">My name is: {{ name }}, and my age is: {{ age }}</p>
    <button @click="handleClick">Click me</button><br><br>
    <button @click="age++">Increase age</button><br><br>
    <input type="text" v-model="name">

    <hr>
    <h2>Refs</h2>
    <p>{{ ninjaOne.name }} - {{ ninjaOne.age }}</p>
    <button @click="updateNinjaOne">Update ninjaOne</button>
    <br><br>
    <h2>Reactive</h2>
    <p>{{ ninjaTwo.name }} - {{ ninjaTwo.age }}</p>
    <button @click="updateNinjaTwo">Update ninjaTwo</button>
    <hr>
  </div>
</template>

<script>
import { ref, reactive } from 'vue'

export default {
  name: 'HomeView',
  setup() {
    // console.log("set up")


    // not used a lot
    const p = ref(null)


    // // non-reactive variables
    // let name = "Hiba"
    // let age = 25

    // reactive variables
    const name = ref("Hiba")
    const age = ref(25)

    const handleClick = () => {
      // // console.log('You clicked me!!')
      // console.log(p, p.value)
      // p.value.classList.add('test')
      // p.value.textContent = "Hello Ninjas!!"


      // changing values of varibales 
      name.value = "Madara"
      age.value = 20
    }


    // comparision between ref, reactive
    const ninjaOne = ref({name: 'gojo', age: 28})
    const ninjaTwo = reactive({name: 'geto', age: 28})

    const updateNinjaOne = () => {
      ninjaOne.value.name = "Hiba Ref"
      ninjaOne.value.age = 25
    }
    const updateNinjaTwo = () => {
      // direct-access to the value of the variable
      ninjaTwo.name = "Hiba Reactive"
      ninjaTwo.age = "25"
    }

    return {
      // name: name,
      // age: age,


      name, age, handleClick, p,


      ninjaOne, updateNinjaOne, ninjaTwo, updateNinjaTwo
    }
  }
}
</script>


*************************
with watch:

<template>
  <div class="home">
    <h1>Home</h1>
    <input type="text" v-model="search">
    <p>search term - {{ search }}</p>
    <div v-for="name in matchingNames" :key="name">
      {{ name }}
    </div>
    <button @click="handleClick">Stop watching</button>
  </div>
</template>

<script>
import { computed, ref, watch, watchEffect } from 'vue'

export default {
  name: 'HomeView',
  setup() {
    const search = ref('')
    const names = ref(['hiba', 'madara', 'gojo', 'levi', 'rukawa'])

    const stopWatch = watch(search, () => {
      console.log('watch function run')
    })

    const stopEffect = watchEffect(() => {
      console.log('watch effect function run', search.value)
    })
    
    const matchingNames = computed(() => {
      return names.value.filter((name) => name.includes(search.value))
    })

    const handleClick = () => {
      stopWatch()
      stopEffect()
    }

    return { names, search, matchingNames, handleClick }
  }
}
</script>

******************************************************************

-> applying lifecycle-hooks in setup():

<template>
  <div class="home">
    <h1>Home</h1>
    <PostList v-if="showPosts" :posts="posts" />
    <button @click="showPosts = !showPosts">toggle posts</button>
    <button @click="posts.pop()">delete post</button>
  </div>
</template>

<script>
import PostList from '../components/PostListView.vue'
import { ref } from 'vue'

export default {
  name: 'HomeView',
  components: { PostList },
  setup() {
    const posts = ref([])

    const showPosts = ref(true)

    return { posts, showPosts }
  }
}
</script>

******************************************************************

